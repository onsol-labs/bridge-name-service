/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CrossChainEnabledAMB,
  CrossChainEnabledAMBInterface,
} from "../CrossChainEnabledAMB";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "bridge",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x60a0604052348015600f57600080fd5b5060405160bc38038060bc833981016040819052602a91603a565b6001600160a01b03166080526068565b600060208284031215604b57600080fd5b81516001600160a01b0381168114606157600080fd5b9392505050565b608051603f607d60003960005050603f6000f3fe6080604052600080fdfea2646970667358221220c85653a4760e918b24ff82de8657ed5e5e62ee05b3c09f1e5b20dff3fdb20dce64736f6c634300080d0033";

export class CrossChainEnabledAMB__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    bridge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CrossChainEnabledAMB> {
    return super.deploy(
      bridge,
      overrides || {}
    ) as Promise<CrossChainEnabledAMB>;
  }
  getDeployTransaction(
    bridge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(bridge, overrides || {});
  }
  attach(address: string): CrossChainEnabledAMB {
    return super.attach(address) as CrossChainEnabledAMB;
  }
  connect(signer: Signer): CrossChainEnabledAMB__factory {
    return super.connect(signer) as CrossChainEnabledAMB__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CrossChainEnabledAMBInterface {
    return new utils.Interface(_abi) as CrossChainEnabledAMBInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CrossChainEnabledAMB {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CrossChainEnabledAMB;
  }
}
