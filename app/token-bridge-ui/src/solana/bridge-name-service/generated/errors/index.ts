/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * PublicKeyMismatch: 'PublicKeyMismatch'
 *
 * @category Errors
 * @category generated
 */
export class PublicKeyMismatchError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'PublicKeyMismatch'
  constructor() {
    super('PublicKeyMismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PublicKeyMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new PublicKeyMismatchError())
createErrorFromNameLookup.set(
  'PublicKeyMismatch',
  () => new PublicKeyMismatchError()
)

/**
 * InvalidSeed: 'Invalid hash name seed length'
 *
 * @category Errors
 * @category generated
 */
export class InvalidSeedError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidSeed'
  constructor() {
    super('Invalid hash name seed length')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidSeedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidSeedError())
createErrorFromNameLookup.set('InvalidSeed', () => new InvalidSeedError())

/**
 * WrongNameAccount: 'Wrong name account'
 *
 * @category Errors
 * @category generated
 */
export class WrongNameAccountError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'WrongNameAccount'
  constructor() {
    super('Wrong name account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongNameAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new WrongNameAccountError())
createErrorFromNameLookup.set(
  'WrongNameAccount',
  () => new WrongNameAccountError()
)

/**
 * WrongAccountOwner: 'Wrong account owner'
 *
 * @category Errors
 * @category generated
 */
export class WrongAccountOwnerError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'WrongAccountOwner'
  constructor() {
    super('Wrong account owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongAccountOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new WrongAccountOwnerError())
createErrorFromNameLookup.set(
  'WrongAccountOwner',
  () => new WrongAccountOwnerError()
)

/**
 * NotRentExempt: 'NotRentExempt'
 *
 * @category Errors
 * @category generated
 */
export class NotRentExemptError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'NotRentExempt'
  constructor() {
    super('NotRentExempt')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotRentExemptError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new NotRentExemptError())
createErrorFromNameLookup.set('NotRentExempt', () => new NotRentExemptError())

/**
 * MetadataDoesntExist: 'Metadata does not exist'
 *
 * @category Errors
 * @category generated
 */
export class MetadataDoesntExistError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'MetadataDoesntExist'
  constructor() {
    super('Metadata does not exist')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MetadataDoesntExistError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new MetadataDoesntExistError())
createErrorFromNameLookup.set(
  'MetadataDoesntExist',
  () => new MetadataDoesntExistError()
)

/**
 * UninitializedAccount: 'Uninitialized Account'
 *
 * @category Errors
 * @category generated
 */
export class UninitializedAccountError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'UninitializedAccount'
  constructor() {
    super('Uninitialized Account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UninitializedAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new UninitializedAccountError())
createErrorFromNameLookup.set(
  'UninitializedAccount',
  () => new UninitializedAccountError()
)

/**
 * DerivedKeyInvalid: 'Invalid Derived Key'
 *
 * @category Errors
 * @category generated
 */
export class DerivedKeyInvalidError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'DerivedKeyInvalid'
  constructor() {
    super('Invalid Derived Key')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DerivedKeyInvalidError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new DerivedKeyInvalidError())
createErrorFromNameLookup.set(
  'DerivedKeyInvalid',
  () => new DerivedKeyInvalidError()
)

/**
 * InvalidAccountData: 'Invalid Account Data'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAccountDataError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InvalidAccountData'
  constructor() {
    super('Invalid Account Data')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAccountDataError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new InvalidAccountDataError())
createErrorFromNameLookup.set(
  'InvalidAccountData',
  () => new InvalidAccountDataError()
)

/**
 * MintMismatch: 'NFT Mint Mismatch'
 *
 * @category Errors
 * @category generated
 */
export class MintMismatchError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'MintMismatch'
  constructor() {
    super('NFT Mint Mismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new MintMismatchError())
createErrorFromNameLookup.set('MintMismatch', () => new MintMismatchError())

/**
 * InvalidNFTAmount: 'Invalid NFT Amount'
 *
 * @category Errors
 * @category generated
 */
export class InvalidNFTAmountError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'InvalidNFTAmount'
  constructor() {
    super('Invalid NFT Amount')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidNFTAmountError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new InvalidNFTAmountError())
createErrorFromNameLookup.set(
  'InvalidNFTAmount',
  () => new InvalidNFTAmountError()
)

/**
 * CollectionAlreadyCreated: 'Collection Already Created'
 *
 * @category Errors
 * @category generated
 */
export class CollectionAlreadyCreatedError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'CollectionAlreadyCreated'
  constructor() {
    super('Collection Already Created')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CollectionAlreadyCreatedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new CollectionAlreadyCreatedError())
createErrorFromNameLookup.set(
  'CollectionAlreadyCreated',
  () => new CollectionAlreadyCreatedError()
)

/**
 * DataTypeMismatch: 'Data type mismatch'
 *
 * @category Errors
 * @category generated
 */
export class DataTypeMismatchError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'DataTypeMismatch'
  constructor() {
    super('Data type mismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DataTypeMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new DataTypeMismatchError())
createErrorFromNameLookup.set(
  'DataTypeMismatch',
  () => new DataTypeMismatchError()
)

/**
 * NFTRecordInactive: 'NFT record inactive'
 *
 * @category Errors
 * @category generated
 */
export class NFTRecordInactiveError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'NFTRecordInactive'
  constructor() {
    super('NFT record inactive')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NFTRecordInactiveError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new NFTRecordInactiveError())
createErrorFromNameLookup.set(
  'NFTRecordInactive',
  () => new NFTRecordInactiveError()
)

/**
 * InvalidFeePayer: 'Fee payer is not an authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidFeePayerError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'InvalidFeePayer'
  constructor() {
    super('Fee payer is not an authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidFeePayerError)
    }
  }
}

createErrorFromCodeLookup.set(0x177e, () => new InvalidFeePayerError())
createErrorFromNameLookup.set(
  'InvalidFeePayer',
  () => new InvalidFeePayerError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
