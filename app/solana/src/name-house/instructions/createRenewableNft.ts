import { ASSOCIATED_TOKEN_PROGRAM_ID } from "@solana/spl-token";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category CreateRenewableNft
 * @category generated
 */
export type CreateRenewableNftInstructionArgs = {
    tld: string;
    hashedName: Uint8Array;
    nameAccountBump: number;
    nftRecordBump: number;
};
/**
 * @category Instructions
 * @category CreateRenewableNft
 * @category generated
 */
export const createRenewableNftStruct = new beet.FixableBeetArgsStruct<
    CreateRenewableNftInstructionArgs & {
        instructionDiscriminator: number[] /* size: 8 */;
    }
>(
    [
        ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
        ["tld", beet.utf8String],
        ["hashedName", beet.bytes],
        ["nameAccountBump", beet.u8],
        ["nftRecordBump", beet.u8],
    ],
    "CreateRenewableNftInstructionArgs",
);
/**
 * Accounts required by the _createRenewableNft_ instruction
 *
 * @property [_writable_, **signer**] owner
 * @property [_writable_] mintAccount
 * @property [_writable_] nameAccount
 * @property [] nameClassAccount
 * @property [] nameParentAccount
 * @property [] reverseNameAccount
 * @property [_writable_] mintAtaAccount
 * @property [_writable_] nftRecord
 * @property [_writable_] tldHouse
 * @property [_writable_] collectionMint
 * @property [_writable_] collectionMetadata
 * @property [] collectionMasterEditionAccount
 * @property [_writable_] editionAccount
 * @property [_writable_] metadataAccount
 * @property [_writable_] nameHouse
 * @property [] splTokenProgram
 * @property [] tokenMetadataProgram
 * @property [] associatedTokenProgram
 * @property [] altNameServiceProgram
 * @property [] instructionSysvarAccount
 * @category Instructions
 * @category CreateRenewableNft
 * @category generated
 */
export type CreateRenewableNftInstructionAccounts = {
    owner: web3.PublicKey;
    mintAccount: web3.PublicKey;
    nameAccount: web3.PublicKey;
    nameClassAccount: web3.PublicKey;
    nameParentAccount: web3.PublicKey;
    reverseNameAccount: web3.PublicKey;
    mintAtaAccount: web3.PublicKey;
    nftRecord: web3.PublicKey;
    tldHouse: web3.PublicKey;
    collectionMint: web3.PublicKey;
    collectionMetadata: web3.PublicKey;
    collectionMasterEditionAccount: web3.PublicKey;
    editionAccount: web3.PublicKey;
    metadataAccount: web3.PublicKey;
    nameHouse: web3.PublicKey;
    splTokenProgram: web3.PublicKey;
    tokenMetadataProgram: web3.PublicKey;
    associatedTokenProgram?: web3.PublicKey;
    altNameServiceProgram: web3.PublicKey;
    systemProgram?: web3.PublicKey;
    instructionSysvarAccount?: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};

export const createRenewableNftInstructionDiscriminator = [
    179, 131, 218, 68, 84, 75, 168, 198,
];

/**
 * Creates a _CreateRenewableNft_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateRenewableNft
 * @category generated
 */
export function createCreateRenewableNftInstruction(
    accounts: CreateRenewableNftInstructionAccounts,
    args: CreateRenewableNftInstructionArgs,
    programId = new web3.PublicKey(
        "NH3uX6FtVE2fNREAioP7hm5RaozotZxeL6khU1EHx51",
    ),
) {
    const [data] = createRenewableNftStruct.serialize({
        instructionDiscriminator: createRenewableNftInstructionDiscriminator,
        ...args,
    });
    const keys: web3.AccountMeta[] = [
        {
            pubkey: accounts.owner,
            isWritable: true,
            isSigner: true,
        },
        {
            pubkey: accounts.mintAccount,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.nameAccount,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.nameClassAccount,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.nameParentAccount,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.reverseNameAccount,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.mintAtaAccount,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.nftRecord,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.tldHouse,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.collectionMint,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.collectionMetadata,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.collectionMasterEditionAccount,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.editionAccount,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.metadataAccount,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.nameHouse,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.splTokenProgram,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.tokenMetadataProgram,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey:
                accounts.associatedTokenProgram ?? ASSOCIATED_TOKEN_PROGRAM_ID,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.altNameServiceProgram,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey:
                accounts.instructionSysvarAccount ??
                web3.SYSVAR_INSTRUCTIONS_PUBKEY,
            isWritable: false,
            isSigner: false,
        },
    ];

    if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
            keys.push(acc);
        }
    }

    const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data,
    });
    return ix;
}
