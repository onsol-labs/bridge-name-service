/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from "@solana/spl-token";
import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category CreateRenewableMint
 * @category generated
 */
export type CreateRenewableMintInstructionArgs = {
    tld: string;
    nameHouseBump: number;
    mintBump: number;
    thBump: number;
};
/**
 * @category Instructions
 * @category CreateRenewableMint
 * @category generated
 */
export const createRenewableMintStruct = new beet.FixableBeetArgsStruct<
    CreateRenewableMintInstructionArgs & {
        instructionDiscriminator: number[] /* size: 8 */;
    }
>(
    [
        ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
        ["tld", beet.utf8String],
        ["nameHouseBump", beet.u8],
        ["mintBump", beet.u8],
        ["thBump", beet.u8],
    ],
    "CreateRenewableMintInstructionArgs",
);
/**
 * Accounts required by the _createRenewableMint_ instruction
 *
 * @property [_writable_, **signer**] owner
 * @property [_writable_] mintAccount
 * @property [_writable_] nameAccount
 * @property [] nameClassAccount
 * @property [] nameParentAccount
 * @property [_writable_] tldHouse
 * @property [_writable_] nameHouse
 * @category Instructions
 * @category CreateRenewableMint
 * @category generated
 */
export type CreateRenewableMintInstructionAccounts = {
    owner: web3.PublicKey;
    mintAccount: web3.PublicKey;
    nameAccount: web3.PublicKey;
    nameClassAccount: web3.PublicKey;
    nameParentAccount: web3.PublicKey;
    tldHouse: web3.PublicKey;
    nameHouse: web3.PublicKey;
    tokenProgram?: web3.PublicKey;
    systemProgram?: web3.PublicKey;
    rent?: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};

export const createRenewableMintInstructionDiscriminator = [
    84, 244, 41, 92, 175, 125, 43, 178,
];

/**
 * Creates a _CreateRenewableMint_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateRenewableMint
 * @category generated
 */
export function createCreateRenewableMintInstruction(
    accounts: CreateRenewableMintInstructionAccounts,
    args: CreateRenewableMintInstructionArgs,
    programId = new web3.PublicKey(
        "NH3uX6FtVE2fNREAioP7hm5RaozotZxeL6khU1EHx51",
    ),
) {
    const [data] = createRenewableMintStruct.serialize({
        instructionDiscriminator: createRenewableMintInstructionDiscriminator,
        ...args,
    });
    const keys: web3.AccountMeta[] = [
        {
            pubkey: accounts.owner,
            isWritable: true,
            isSigner: true,
        },
        {
            pubkey: accounts.mintAccount,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.nameAccount,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.nameClassAccount,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.nameParentAccount,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.tldHouse,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.nameHouse,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
            isWritable: false,
            isSigner: false,
        },
    ];

    if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
            keys.push(acc);
        }
    }

    const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data,
    });
    return ix;
}
