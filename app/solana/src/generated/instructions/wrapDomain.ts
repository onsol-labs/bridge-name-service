/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category WrapDomain
 * @category generated
 */
export type WrapDomainInstructionArgs = {
  tld: string
  hashedName: Uint8Array
  reverseAccHashedName: Uint8Array
  name: string
  space: number
  thBump: number
  nameParentBump: number
  durationRate: number
  mintBump: number
}
/**
 * @category Instructions
 * @category WrapDomain
 * @category generated
 */
export const wrapDomainStruct = new beet.FixableBeetArgsStruct<
  WrapDomainInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['tld', beet.utf8String],
    ['hashedName', beet.bytes],
    ['reverseAccHashedName', beet.bytes],
    ['name', beet.utf8String],
    ['space', beet.u32],
    ['thBump', beet.u8],
    ['nameParentBump', beet.u8],
    ['durationRate', beet.u16],
    ['mintBump', beet.u8],
  ],
  'WrapDomainInstructionArgs'
)
/**
 * Accounts required by the _wrapDomain_ instruction
 *
 * @property [_writable_, **signer**] owner
 * @property [_writable_] bnsVault
 * @property [_writable_] vaultAtaAccount
 * @property [] tldState
 * @property [_writable_] tldHouse
 * @property [] treasuryManager
 * @property [_writable_] authority
 * @property [_writable_] paymentTokenMint
 * @property [_writable_] nameAccount
 * @property [_writable_] reverseNameAccount
 * @property [_writable_] bnsMintAccount
 * @property [_writable_] bnsMintAtaAccount
 * @property [_writable_] ansMintAccount
 * @property [] nameClassAccount
 * @property [_writable_] nameParentAccount
 * @property [_writable_] nameHouseAccount
 * @property [] tldHouseProgram
 * @property [] nameHouseProgram
 * @property [] altNameServiceProgram
 * @category Instructions
 * @category WrapDomain
 * @category generated
 */
export type WrapDomainInstructionAccounts = {
  owner: web3.PublicKey
  bnsVault: web3.PublicKey
  vaultAtaAccount: web3.PublicKey
  tldState: web3.PublicKey
  tldHouse: web3.PublicKey
  treasuryManager: web3.PublicKey
  authority: web3.PublicKey
  paymentTokenMint: web3.PublicKey
  nameAccount: web3.PublicKey
  reverseNameAccount: web3.PublicKey
  bnsMintAccount: web3.PublicKey
  bnsMintAtaAccount: web3.PublicKey
  ansMintAccount: web3.PublicKey
  nameClassAccount: web3.PublicKey
  nameParentAccount: web3.PublicKey
  nameHouseAccount: web3.PublicKey
  ataProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  tldHouseProgram: web3.PublicKey
  nameHouseProgram: web3.PublicKey
  altNameServiceProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  rent?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const wrapDomainInstructionDiscriminator = [
  140, 15, 76, 58, 117, 245, 17, 44,
]

/**
 * Creates a _WrapDomain_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category WrapDomain
 * @category generated
 */
export function createWrapDomainInstruction(
  accounts: WrapDomainInstructionAccounts,
  args: WrapDomainInstructionArgs,
  programId = new web3.PublicKey('BQqpUU12TqvMm6NRwM9Lv7vKZLWwWzgaZh2Q2qvkmcbi')
) {
  const [data] = wrapDomainStruct.serialize({
    instructionDiscriminator: wrapDomainInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.owner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.bnsVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vaultAtaAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tldState,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tldHouse,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treasuryManager,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.paymentTokenMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.nameAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.reverseNameAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.bnsMintAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.bnsMintAtaAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.ansMintAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.nameClassAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.nameParentAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.nameHouseAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.ataProgram ?? splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tldHouseProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.nameHouseProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.altNameServiceProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
